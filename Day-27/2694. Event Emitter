class EventEmitter {
    events = new Map() // event -> set

  subscribe(event, cb) {
      if (!this.events.has(event)) {
            this.events.set(event, new Set());
        }

        const set = this.events.get(event);
        set.add(cb);

    return {
        unsubscribe: () => {
            set.delete(cb);
        }
    };
  }

  emit(event, args = []) {
      if (!this.events.has(event)) {
            return [];
        }

        const set = this.events.get(event);
        const res = [];

        for (const cb of set) {
            res.push(cb(...args));
        }

        return res;
  }
}

/**
 * const emitter = new EventEmitter();
 *
 * // Subscribe to the onClick event with onClickCallback
 * function onClickCallback() { return 99 }
 * const sub = emitter.subscribe('onClick', onClickCallback);
 *
 * emitter.emit('onClick'); // [99]
 * sub.unsubscribe(); // undefined
 * emitter.emit('onClick'); // []
 */
