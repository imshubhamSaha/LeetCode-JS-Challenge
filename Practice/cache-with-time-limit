var TimeLimitedCache = function() {
   this.cache = new Map()
   
};

/** 
 * @param {number} key
 * @param {number} value
 * @param {number} time until expiration in ms
 * @return {boolean} if un-expired key already existed
 */
TimeLimitedCache.prototype.set = function(key, value, duration) {
   
    if(this.cache.has(key)){
       let {timer} =  this.cache.get(key)
       clearTimeout(timer)
        timer = setTimeout(() => {
         this.cache.delete(key)
       },duration)
       this.cache.set(key, {value,timer})
       return true
    }else{
       
       let timer = setTimeout(() => {
         this.cache.delete(key)
       },duration)
       this.cache.set(key, {value, timer})
       return false
    }
};

/** 
 * @param {number} key
 * @return {number} value associated with key
 */
TimeLimitedCache.prototype.get = function(key) {
    if(this.cache.has(key)) {
       let {value} = this.cache.get(key)
       return value
       }
    else return -1
};

/** 
 * @return {number} count of non-expired keys
 */
TimeLimitedCache.prototype.count = function() {
    if(this.cache.size) return this.cache.size
    else return 0
};

/**
 * Your TimeLimitedCache object will be instantiated and called as such:
 * var obj = new TimeLimitedCache()
 * obj.set(1, 42, 1000); // false
 * obj.get(1) // 42
 * obj.count() // 1
 */
